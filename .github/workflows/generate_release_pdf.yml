name: Generate Release PDF
on: 
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - '**.md'
env:
  TYPST_FILE_NAME: Riemann_surfaces
  TYPST_FONT_PATHS: /usr/share/fonts
jobs:
  build_typst:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
      - name: Prepare Typst environment
        uses: typst-community/setup-typst@v3
        with:
          cache-dependency-path: requirements.typ
      - name: Download Computer Modern Sans Serif Fonts
        run: |
          ls
          echo "Github: Downloading Computer Modern Sans Serif font family..."
          # Create target directory
          sudo mkdir -p /usr/share/fonts/opentype/newcomputermodern
          # Download and extract font archive
          wget https://mirrors.ctan.org/fonts/newcomputermodern.zip
          unzip newcomputermodern.zip
          # Copy font files to target directory
          sudo cp newcomputermodern/otf/*.otf /usr/share/fonts/opentype/newcomputermodern/
          # Copy font files to current directory
          cp newcomputermodern/otf/*.otf ./
          # Cleanup
          rm -rf newcomputermodern.zip newcomputermodern
          wget -O noto-serif.zip https://www.fontsquirrel.com/fonts/download/noto-serif
          unzip -d noto-serif/ noto-serif.zip
          echo "Moving fonts to the system fonts directory..."
          sudo mv noto-serif /usr/share/fonts/truetype
          echo "Github: Rebuild font cache"
          sudo fc-cache -f -v
          echo "Github: Download complete."
      - name: List Installed Fonts
        run: |
          echo "Github: Listing all installed fonts..."
          fc-list
      - name: Compile Typst document
        run: |
          typst fonts
          typst compile ${{ env.TYPST_FILE_NAME }}.typ ${{ env.TYPST_FILE_NAME }}.pdf 
      - name: Delete old Release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            try {
              const { data: { id } } = await github.rest.repos.getLatestRelease({ owner, repo })
              await github.rest.repos.deleteRelease({ owner, repo, release_id: id })
            } catch {}
      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::latest_$(date +"%Y-%m-%d_%H-%M")"
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: latest version
          body: Latest version of `${{ env.TYPST_FILE_NAME }}.pdf`
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.TYPST_FILE_NAME }}.pdf
